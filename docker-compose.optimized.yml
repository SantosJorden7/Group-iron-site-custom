version: "3.8"
services:
  # Frontend service with optimized volume mounts for all features
  group-ironmen-frontend:
    image: chrisleeeee/group-ironmen-tracker-frontend
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - HOST_URL=${HOST_URL}
      - REACT_APP_API_URL=http://group-ironmen-backend:8080
      - NODE_ENV=production
    restart: always
    container_name: group-ironmen-frontend
    ports:
      - 4000:4000
    volumes:
      - frontend-cache:/app/cache  # For persistent caching of API responses
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - group-ironmen-network

  # Backend service with optimized configuration for all features
  group-ironmen-backend:
    image: chrisleeeee/group-ironmen-tracker-backend
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DB=${PG_DB}
      - BACKEND_SECRET=${BACKEND_SECRET}
      - NODE_ENV=production
      # Add any other environment variables needed for features
      - WIKI_API_CACHE_DURATION=3600 # Cache Wiki API responses for 1 hour
      - WOM_API_CACHE_DURATION=1800 # Cache Wise Old Man API responses for 30 minutes
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    container_name: group-ironmen-backend
    ports:
      - 5000:8080
    volumes:
      - backend-cache:/app/cache  # For persistent caching
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - group-ironmen-network

  # Database with optimized configuration
  postgres:
    image: postgres:14
    restart: always
    container_name: group-ironmen-postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
      # Optimized PostgreSQL settings
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - ./pg-data:/var/lib/postgresql/data
      - ./server/src/sql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - 5432:5432
    command: 
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=16MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - group-ironmen-network

  # Optional Redis for improved caching (especially helpful for Collection Log and Wiki data)
  redis:
    image: redis:alpine
    restart: always
    container_name: group-ironmen-redis
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - group-ironmen-network

volumes:
  pg-data:
  redis-data:
  frontend-cache:
  backend-cache:

networks:
  group-ironmen-network:
    driver: bridge
